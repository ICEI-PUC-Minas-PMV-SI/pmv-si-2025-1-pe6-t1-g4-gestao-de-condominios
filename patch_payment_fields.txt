import { Payment } from '@/types/Payment';
import { DateUtil } from '@/utilities/Date';
import { ApartmentText } from '@/helper/ApartmentText';
import { Apartment } from '@/types/Data';
import { Fee } from '@/types/Fee';
import { User } from '@/types/User';
import Text from '@/utilities/Text';
import ValidationPattern from '@/utilities/ValidationPattern';
=======
// Define types for select-wrapper items
type PaymentApartment = Apartment;
type PaymentUser = User;
type PaymentFee = Fee;

import { FormFieldEdit } from '@/components/form/Edit';
import { Payment } from '@/types/Payment';
import { DateUtil } from '@/utilities/Date';
import { ApartmentText } from '@/helper/ApartmentText';
import { Apartment } from '@/types/Data';
import { Fee } from '@/types/Fee';
import { User } from '@/types/User';
import Text from '@/utilities/Text';
import ValidationPattern from '@/utilities/ValidationPattern';
>>>>>>> REPLACE

<<<<<<< SEARCH
        dataSource: {
          resource: 'apartments',
          uniqueKey: 'id',
        },
        defaultValueKey: 'apartmentId',
        placeholder: 'Selecione um apartamento',
        getItemText(item: PaymentApartment) {
          return `Apto ${item.number} | Andar: ${item.floor} | Bloco: ${item.block}`;
        },
        keyExtractor: (item: PaymentApartment) => item.id,
      },
      {
        name: 'user',
        type: 'select-wrapper',
        label: 'Usuário',
        rules: { required: true },
        dataSource: {
          resource: 'users',
          uniqueKey: 'id',
        },
        defaultValueKey: 'userId',
        placeholder: 'Selecione um apartamento',
        getItemText(item: PaymentUser) {
          return item.name;
        },
        keyExtractor: (item: PaymentUser) => item.id,
      },
      {
        name: 'fee',
        type: 'select-wrapper',
        label: 'Taxa',
        rules: { required: true },
        dataSource: {
          resource: 'fees',
          uniqueKey: 'id',
        },
        defaultValueKey: 'feeId',
        placeholder: 'Selecione uma Taxa',
        getItemText(item: PaymentFee) {
          return item.name;
        },
        keyExtractor: (item: PaymentFee) => item.id,
      },
    ];
=======
        dataSource: {
          // The resource name corresponds to the API endpoint 'apartments'
          resource: 'apartments',
          uniqueKey: 'id',
        },
        defaultValueKey: 'apartmentId',
        placeholder: 'Selecione um apartamento',
        getItemText(item: PaymentApartment) {
          // Format how each apartment item is displayed in the select
          return `Apto ${item.number} | Andar: ${item.floor} | Bloco: ${item.block}`;
        },
        keyExtractor: (item: PaymentApartment) => item.id,
      },
      {
        name: 'user',
        type: 'select-wrapper',
        label: 'Usuário',
        rules: { required: true },
        dataSource: {
          // The resource name corresponds to the API endpoint 'users'
          resource: 'users',
          uniqueKey: 'id',
        },
        defaultValueKey: 'userId',
        placeholder: 'Selecione um usuário',
        getItemText(item: PaymentUser) {
          // Display the user's name fetched from the API
          return item.name;
        },
        keyExtractor: (item: PaymentUser) => item.id,
      },
      {
        name: 'fee',
        type: 'select-wrapper',
        label: 'Taxa',
        rules: { required: true },
        dataSource: {
          // The resource name corresponds to the API endpoint 'fees'
          resource: 'fees',
          uniqueKey: 'id',
        },
        defaultValueKey: 'feeId',
        placeholder: 'Selecione uma Taxa',
        getItemText(item: PaymentFee) {
          // Display the fee name fetched from the API
          return item.name;
        },
        keyExtractor: (item: PaymentFee) => item.id,
      },
    ];
