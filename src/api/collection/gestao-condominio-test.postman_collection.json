{
	"info": {
		"_postman_id": "60233674-9405-4cc1-a7b9-997647db690f",
		"name": "gestao-condominio-test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24386019",
		"_collection_link": "https://puc-gesto-de-condomnio.postman.co/workspace/PUC---Gest%C3%A3o-de-Condom%C3%ADnio-Work~ff37581e-368e-49a7-9935-c4156ccdce69/collection/24386019-60233674-9405-4cc1-a7b9-997647db690f?action=share&source=collection_link&creator=24386019"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Generate Tokens",
					"item": [
						{
							"name": "/auth - ADMIN",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"  var data = pm.response.json();\r",
											"  pm.collectionVariables.set('admin_token', data.token);\r",
											"// No specific test assertions requested\r",
											"// Adding a basic test for response status code\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});} catch(err) {}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"admin@example.com\",\r\n    \"password\": \"abc123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/auth",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "/auth - MANAGER",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"  var data = pm.response.json();\r",
											"  pm.collectionVariables.set('manager_token', data.token);\r",
											"} catch(err) {}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"manager@manager.com\",\r\n    \"password\": \"abc123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/auth",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "/auth - RESIDENT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"  var data = pm.response.json();\r",
											"  pm.collectionVariables.set('resident_token', data.token);\r",
											"} catch(err) {}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"resident@resident.com\",\r\n    \"password\": \"abc123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/auth",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "POST /auth",
					"item": [
						{
							"name": "/auth - Invalid Credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 401 - Unathorized\", function () {\r",
											"    pm.response.to.be.unauthorized\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{$randomPassword}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/auth",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "/auth - Empty Body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400 - Bad Request\", function () {\r",
											"    pm.response.to.be.badRequest\r",
											"});\r",
											"\r",
											"pm.test(\"Response is json\", function () {\r",
											"    pm.response.to.be.json\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct error structure\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data, 'Property \"message\" is string').to.have.property('message').to.be.string\r",
											"    pm.expect(data, 'Property \"errors\" not defined or type is different of array').to.have.property('errors').that.is.a('array')\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has error in email and password\", function () {\r",
											"    var data = pm.response.json();\r",
											"    var fields = ['email', 'password'];\r",
											"    pm.expect(data.errors.every((error) => fields.includes(error.field))).true\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{api_url}}/auth",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "/auth - Valid Credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200 - OK\", function () {\r",
											"    pm.response.to.be.ok\r",
											"});\r",
											"\r",
											"pm.test(\"Response is json\", function () {\r",
											"    pm.response.to.be.json\r",
											"});\r",
											"\r",
											"pm.test(\"Response has token in string format\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data).to.have.property('token').to.be.string\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"admin@example.com\",\r\n    \"password\": \"abc123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/auth",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "POST /users",
					"item": [
						{
							"name": "/users - Empty Payload",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400 - Bad Request\", function () {",
											"    pm.response.to.be.badRequest",
											"});",
											"",
											"",
											"pm.test(\"Response is json\", function () {",
											"    pm.response.to.be.json",
											"});",
											"",
											"pm.test(\"Response has correct error structure\", function () {",
											"    const schema = {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"message\": { \"type\": \"string\" },",
											"            \"errors\": { \"type\": \"array\" }",
											"        },",
											"        \"required\": [\"message\", \"errors\"]",
											"    }",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"",
											"pm.test(\"Response has correct error in email, password, name, profile fields\", function () {",
											"    var data = pm.response.json();",
											"    var fields = ['email', 'password', 'name', 'profile'];",
											"    pm.expect(data.errors.every((error) => fields.includes(error.field))).true",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{api_url}}/users/",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/users - Invalid Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400 - Bad Request\", function () {",
											"    pm.response.to.be.badRequest",
											"});",
											"",
											"",
											"pm.test(\"Response is json\", function () {",
											"    pm.response.to.be.json",
											"});",
											"",
											"pm.test(\"Response has correct error structure\", function () {",
											"    var data = pm.response.json();",
											"    pm.expect(data, 'Property \"message\" is string').to.have.property('message').to.be.string",
											"    pm.expect(data, 'Property \"errors\" not defined or type is different of array').to.have.property('errors').that.is.a('array')",
											"});",
											"",
											"",
											"pm.test(\"Response has correct error in email field\", function () {",
											"    var data = pm.response.json();",
											"    var fields = ['email'];",
											"    pm.expect(data.errors.every((error) => fields.includes(error.field))).true",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"example@example\",\r\n    \"password\": \"1\",\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"profile\": \"ADMIN\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/users/",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/users - Invalid Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400 - Bad Request\", function () {",
											"    pm.response.to.be.badRequest",
											"});",
											"",
											"",
											"pm.test(\"Response is json\", function () {",
											"    pm.response.to.be.json",
											"});",
											"",
											"pm.test(\"Response has correct error structure\", function () {",
											"    var data = pm.response.json();",
											"    pm.expect(data, 'Property \"message\" is string').to.have.property('message').to.be.string",
											"    pm.expect(data, 'Property \"errors\" not defined or type is different of array').to.have.property('errors').that.is.a('array')",
											"});",
											"",
											"",
											"pm.test(\"Response has correct error in profile field\", function () {",
											"    var data = pm.response.json();",
											"    var fields = ['profile'];",
											"    pm.expect(data.errors.every((error) => fields.includes(error.field))).true",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"1\",\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"profile\": \"admin\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/users/",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/users - Empty Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 401 - Unathorized\", function () {",
											"    pm.response.to.be.unauthorized",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"1\",\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"profile\": \"ADMIN\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/users/",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/users - User Created",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201 - Created\", function () {",
											"    pm.response.to.have.status(201)",
											"});",
											"",
											"",
											"pm.test(\"Response is json\", function () {",
											"    pm.response.to.be.json",
											"});",
											"",
											"pm.test(\"Response has correct user response\", function () {",
											"    var data = pm.response.json();",
											"    pm.expect(data.user.id).is.string",
											"    pm.collectionVariables.set(\"new_user_id\", data.user.id)",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"profile\": \"RESIDENT\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/users/",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"users",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "POST /users/forgot-password",
					"item": [
						{
							"name": "/users/forgot-password",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{user_forgot_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/users/forgot-password",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"users",
										"forgot-password"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET /users",
					"item": [
						{
							"name": "/users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200 - OK\", function () {\r",
											"    pm.response.to.be.ok\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response is json\", function () {\r",
											"    pm.response.to.be.json\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"testes@teste.com\",\r\n    \"password\": \"123\",\r\n    \"name\": \"Teste\",\r\n    \"profile\": \"ADMIN\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/users",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "/users - Empty Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 401 - Unathorized\", function () {\r",
											"    pm.response.to.be.unauthorized\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_url}}/users",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "/users - Invalid Permission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 403 - Forbidden\", function () {\r",
											"    pm.response.to.be.forbidden\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{resident_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_url}}/users",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PUT /users/:id",
					"item": [
						{
							"name": "/users/:id - User Updated",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200 - OK\", function () {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"resident@resident.com\",\r\n    \"password\": \"abc123\",\r\n    \"name\": \"{{$randomUserName}}\",\r\n    \"profile\": \"RESIDENT\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/users/:id",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "cm95et3qo0000lymo8qjugf0u"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/users/:id - Empty Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 401 - Unathorized\", function () {\r",
											"    pm.response.to.be.unauthorized\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"resident@resident.com\",\r\n    \"password\": \"abc123\",\r\n    \"name\": \"{{$randomUserName}}\",\r\n    \"profile\": \"RESIDENT\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/users/:id",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "cm95et3qo0000lymo8qjugf0u"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET /users/:userId",
					"item": [
						{
							"name": "/users/:userId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response is json\", function () {\r",
											"    pm.response.to.be.json\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct user response\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.user.id).is.string\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_url}}/users/{{fixed_manager_user_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"users",
										"{{fixed_manager_user_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DELETE /users/:id",
					"item": [
						{
							"name": "/users/:id - Empty UserId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400 - Bad Request\", function () {\r",
											"    pm.response.to.be.badRequest\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response is json\", function () {\r",
											"    pm.response.to.be.json\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct error structure\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data, 'Property \"message\" is string').to.have.property('message').to.be.string\r",
											"    pm.expect(data, 'Property \"errors\" not defined or type is different of array').to.have.property('errors').that.is.a('array')\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has correct errors fields\", function () {\r",
											"    var data = pm.response.json();\r",
											"    var fields = ['id'];\r",
											"    pm.expect(data.errors.every((error) => fields.includes(error.field))).true\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{api_url}}/users/:id",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/users/:id - Empty Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 401 - Unathorized\", function () {\r",
											"    pm.response.to.be.unauthorized\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{api_url}}/users/:id",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "cm8gwtwur0006lyo4rwlsyj0w"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/users/:id - Invalid Permission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 403 - Forbidden\", function () {\r",
											"    pm.response.to.be.forbidden\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{resident_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{api_url}}/users/:id",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "cm8gwtwur0006lyo4rwlsyj0w"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "POST /users/reset-password",
					"item": [
						{
							"name": "/reset-password - Empty Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 401 - Unathorized\", function () {\r",
											"    pm.response.to.be.unauthorized\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{api_url}}/users/reset-password",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"users",
										"reset-password"
									]
								}
							},
							"response": []
						},
						{
							"name": "/reset-password - Empty Payload",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400 - Bad Request\", function () {\r",
											"    pm.response.to.be.badRequest\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{api_url}}/users/reset-password",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"users",
										"reset-password"
									]
								}
							},
							"response": []
						},
						{
							"name": "/reset-password - Invalid Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400 - Bad Request\", function () {\r",
											"    pm.response.to.be.badRequest\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response is json\", function () {\r",
											"    pm.response.to.be.json\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct error structure\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data, 'Property \"message\" is string').to.have.property('message').to.be.string\r",
											"    pm.expect(data, 'Property \"errors\" not defined or type is different of array').to.have.property('errors').that.is.a('array')\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has correct error in newPassword field\", function () {\r",
											"    var data = pm.response.json();\r",
											"    var fields = ['newPassword'];\r",
											"    pm.expect(data.errors.every((error) => fields.includes(error.field))).true\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"12345678\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/users/reset-password",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"users",
										"reset-password"
									]
								}
							},
							"response": []
						},
						{
							"name": "/reset-password - Password Changed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 204 - No content\", function () {\r",
											"    pm.response.to.have.status(204)\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{reset_password_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"newPassword\": \"MyPassword1$\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/users/reset-password",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"users",
										"reset-password"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Common Area",
			"item": [
				{
					"name": "/common-areas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is JSON\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response has 'commonAreas' array with valid structure\", function () {",
									"    const jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData).to.have.property(\"commonAreas\").that.is.an(\"array\");",
									"",
									"    jsonData.commonAreas.forEach(area => {",
									"        pm.expect(area).to.have.property(\"id\").that.is.a(\"string\");",
									"        pm.expect(area).to.have.property(\"type\").that.is.a(\"string\");",
									"        pm.expect(area).to.have.property(\"quantity\").that.is.a(\"number\");",
									"        pm.expect(area).to.have.property(\"condominiumId\").that.is.a(\"string\");",
									"        pm.expect(area).to.have.property(\"createdAt\").that.is.a(\"string\");",
									"        pm.expect(area).to.have.property(\"updatedAt\").that.is.a(\"string\");",
									"        pm.expect(area).to.have.property(\"createdBy\");",
									"        pm.expect(area).to.have.property(\"updatedBy\");",
									"    });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/common-areas",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"common-areas"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Condominiums",
			"item": [
				{
					"name": "/condominiums",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200 - OK\", function () {",
									"    pm.response.to.be.ok",
									"});",
									"",
									"",
									"pm.test(\"Response is json\", function () {",
									"    pm.response.to.be.json",
									"});",
									"",
									"pm.test(\"Response has 'condominiums' as an array\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('condominiums').that.is.an('array');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/condominiums",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"condominiums"
							]
						}
					},
					"response": []
				},
				{
					"name": "/condominiums - Condo Created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201 - Created\", function () {",
									"    pm.response.to.have.status(201)",
									"});",
									"",
									"",
									"pm.test(\"Response is json\", function () {",
									"    pm.response.to.be.json",
									"});",
									"",
									"pm.test(\"Response has correct user response\", function () {",
									"    var data = pm.response.json();",
									"    pm.expect(data.condominium.id).is.string",
									"    pm.collectionVariables.set(\"new_condo_id\", data.condominium.id)",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{$randomFullName}}\",\n    \"address\": \"{{$randomStreetAddress}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/condominiums",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"condominiums"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Apartments",
			"item": [
				{
					"name": "/apartments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200 - OK\", function () {",
									"    pm.response.to.be.ok",
									"});",
									"",
									"pm.test(\"Response is json\", function () {",
									"    pm.response.to.be.json",
									"});",
									"",
									"pm.test(\"Response has 'apartments' as an array\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('apartments').that.is.an('array');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/apartments",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"apartments"
							]
						}
					},
					"response": []
				},
				{
					"name": "/apartments - Assign User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is JSON\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response has expected structure\", function () {",
									"    const jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");",
									"",
									"    pm.expect(jsonData).to.have.property(\"result\").that.is.an(\"object\");",
									"",
									"    const result = jsonData.result;",
									"",
									"    pm.expect(result).to.have.property(\"id\").that.is.a(\"string\");",
									"    pm.expect(result).to.have.property(\"block\").that.is.a(\"string\");",
									"    pm.expect(result).to.have.property(\"number\").that.is.a(\"number\");",
									"    pm.expect(result).to.have.property(\"floor\").that.is.a(\"number\");",
									"    pm.expect(result).to.have.property(\"condominiumId\").that.is.a(\"string\");",
									"    pm.expect(result).to.have.property(\"createdAt\").that.is.a(\"string\");",
									"    pm.expect(result).to.have.property(\"updatedAt\").that.is.a(\"string\");",
									"    pm.expect(result).to.have.property(\"createdBy\");",
									"    pm.expect(result).to.have.property(\"updatedBy\");",
									"    pm.expect(result).to.have.property(\"userId\").that.is.a(\"string\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \"userId\": \"{{new_user_id}}\" }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/apartments/{{new_apartment_id}}/assign-user",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"apartments",
								"{{new_apartment_id}}",
								"assign-user"
							]
						}
					},
					"response": []
				},
				{
					"name": "/apartments - Unassign User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is JSON\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response has expected structure\", function () {",
									"    const jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");",
									"",
									"    pm.expect(jsonData).to.have.property(\"result\").that.is.an(\"object\");",
									"",
									"    const result = jsonData.result;",
									"",
									"    pm.expect(result).to.have.property(\"id\").that.is.a(\"string\");",
									"    pm.expect(result).to.have.property(\"block\").that.is.a(\"string\");",
									"    pm.expect(result).to.have.property(\"number\").that.is.a(\"number\");",
									"    pm.expect(result).to.have.property(\"floor\").that.is.a(\"number\");",
									"    pm.expect(result).to.have.property(\"condominiumId\").that.is.a(\"string\");",
									"    pm.expect(result).to.have.property(\"createdAt\").that.is.a(\"string\");",
									"    pm.expect(result).to.have.property(\"updatedAt\").that.is.a(\"string\");",
									"    pm.expect(result).to.have.property(\"createdBy\");",
									"    pm.expect(result).to.have.property(\"updatedBy\");",
									"    pm.expect(result).to.have.property(\"userId\").that.is.a(\"null\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{api_url}}/apartments/{{new_apartment_id}}/unassign-user/{{new_apartment_id}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"apartments",
								"{{new_apartment_id}}",
								"unassign-user",
								"{{new_apartment_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/apartments - Apartment Created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201 - Created\", function () {",
									"    pm.response.to.have.status(201)",
									"});",
									"",
									"",
									"pm.test(\"Response is json\", function () {",
									"    pm.response.to.be.json",
									"});",
									"",
									"pm.test(\"Response has correct user response\", function () {",
									"    var data = pm.response.json();",
									"    pm.expect(data.apartment.id).is.string",
									"    pm.collectionVariables.set(\"new_apartment_id\", data.apartment.id)",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"block\": \"{{$randomLoremWord}}\",\n    \"number\": {{$randomInt}},\n    \"floor\": {{$randomInt}},\n    \"condominiumId\": \"{{new_condo_id}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/apartments",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"apartments"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Fee",
			"item": [
				{
					"name": "POST /fees",
					"item": [
						{
							"name": "/fees - Empty Payload",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400 - Bad Request\", function () {",
											"    pm.response.to.be.badRequest",
											"});",
											"",
											"",
											"pm.test(\"Response is json\", function () {",
											"    pm.response.to.be.json",
											"});",
											"",
											"pm.test(\"Response has correct error structure\", function () {",
											"    const schema = {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"message\": { \"type\": \"string\" },",
											"            \"errors\": { \"type\": \"array\" }",
											"        },",
											"        \"required\": [\"message\", \"errors\"]",
											"    }",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"",
											"pm.test(\"Response has correct error in type, name, due, isRecurrent fields\", function () {",
											"    var data = pm.response.json();",
											"    var fields = ['type', 'name', 'due', 'isRecurrent'];",
											"    pm.expect(data.errors.every((error) => fields.includes(error.field))).true",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{api_url}}/fees/",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"fees",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/fees - Fee Created",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201 - Created\", function () {",
											"    pm.response.to.have.status(201)",
											"});",
											"",
											"",
											"pm.test(\"Response is json\", function () {",
											"    pm.response.to.be.json",
											"});",
											"",
											"pm.test(\"Response has correct fee response\", function () {",
											"    var data = pm.response.json();",
											"    pm.expect(data.fee.id).is.string",
											"    pm.collectionVariables.set(\"new_fee_id\", data.fee.id)",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomNoun}}\",\r\n    \"due\": \"{{$randomDateFuture}}\",\r\n    \"isRecurrent\": {{$randomBoolean}},\r\n    \"type\": \"RENT\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/fees/",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"fees",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET /Fees",
					"item": [
						{
							"name": "/fees",
							"request": {
								"method": "GET",
								"header": []
							},
							"response": []
						},
						{
							"name": "/fees - Invalid Permission",
							"request": {
								"method": "GET",
								"header": []
							},
							"response": []
						},
						{
							"name": "/fees - Empty Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 403 - Forbidden\", function () {\r",
											"    pm.response.to.be.forbidden\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_url}}/fees/",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"fees",
										""
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Payment",
			"item": []
		},
		{
			"name": "Noticemanagement",
			"item": [
				{
					"name": "noticeManagement",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				}
			]
		},
		{
			"name": "Clear Tokens",
			"item": [
				{
					"name": "Clear Tokens",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.collectionVariables.set('admin_token', '')\r",
									"pm.collectionVariables.set('manager_token', '')\r",
									"pm.collectionVariables.set('resident_token', '')\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}",
							"host": [
								"{{api_url}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "admin_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "manager_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "resident_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "api_url",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "user_to_delete",
			"value": "cm8gwtwur0006lyo4rwlsyj0w",
			"type": "string"
		},
		{
			"key": "user_change_password",
			"value": "cm8i76f940000lyc4yj92ou1w",
			"type": "string"
		},
		{
			"key": "user_forgot_password",
			"value": "user_forgot_password@teste.com",
			"type": "string"
		},
		{
			"key": "forgot_password_token",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InVzZXJfZm9yZ290X3Bhc3N3b3JkQHRlc3RlLmNvbSIsIm9wZXJhdGlvbiI6IlJFU0VUX1BBU1NXT1JEIiwiaWF0IjoxNzQzMDI0OTE2LCJleHAiOjE3OTQ4NjQ5MTZ9.zjzyXiio0F7BorbzYr3r0XhNkvSCu6djzxU2MiA7Qdk",
			"type": "string"
		},
		{
			"key": "new_user_id",
			"value": ""
		},
		{
			"key": "new_condo_id",
			"value": ""
		},
		{
			"key": "new_apartment_id",
			"value": ""
		},
		{
			"key": "reset_password_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "fixed_manager_user_id",
			"value": "",
			"type": "string"
		}
	]
}