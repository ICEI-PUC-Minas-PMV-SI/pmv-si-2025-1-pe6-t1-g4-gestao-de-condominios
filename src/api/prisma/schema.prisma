generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserProfile {
  ADMIN
  MANAGER
  RESIDENT
}

enum CommonAreaType {
  PARKING
  BARBECUE
  COURT
  PARTY_ROOM
  OTHER
}

enum FeeType {
  RENT
  CONDOMINIUM
}

model Condominium {
  id          String      @id @default(cuid())
  name        String
  address     String

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  createdBy   String?
  updatedBy   String?

  apartments   Apartment[]
  commonAreas  CommonArea[]
  users        User[]
}

model Apartment {
  id             String        @id @default(cuid())
  block          String
  number         Int
  floor          Int

  condominium    Condominium   @relation(fields: [condominiumId], references: [id])
  condominiumId  String

  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  createdBy      String?
  updatedBy      String?

  userLinks      UserApartment[]
  fees           Fee[]
}

model User {
  id            String       @id @default(cuid())
  name          String
  email         String       @unique
  password      String
  phone         String?
  birthDate     DateTime?
  profile       UserProfile
  contactPhone  String?
  isActive      Boolean  @default(true)

  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  createdBy     String?
  updatedBy     String?

  reservations  CommonAreaReservation[]
  apartments    UserApartment[]

  condominium   Condominium? @relation(fields: [condominiumId], references: [id])
  condominiumId String?
}

model UserApartment {
  id            String       @id @default(cuid())

  user          User         @relation(fields: [userId], references: [id])
  userId        String

  apartment     Apartment    @relation(fields: [apartmentId], references: [id])
  apartmentId   String
}

model CommonArea {
  id            String        @id @default(cuid())
  type          CommonAreaType
  quantity      Int

  condominium   Condominium   @relation(fields: [condominiumId], references: [id])
  condominiumId String

  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  createdBy     String?
  updatedBy     String?

  reservations  CommonAreaReservation[]
}

model CommonAreaReservation {
  id            String       @id @default(cuid())

  user          User         @relation(fields: [userId], references: [id])
  userId        String

  commonArea    CommonArea   @relation(fields: [commonAreaId], references: [id])
  commonAreaId  String

  startDate     DateTime
  endDate       DateTime

  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  createdBy     String?
  updatedBy     String?
}

model Fee {
  id             String      @id @default(cuid())
  apartment      Apartment   @relation(fields: [apartmentId], references: [id])
  apartmentId    String

  type           FeeType
  dueDate        DateTime
  amount         Decimal

  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  createdBy      String?
  updatedBy      String?

  payments       FeePayment[]
}

model FeePayment {
  id        String    @id @default(cuid())
  date      DateTime

  fee       Fee       @relation(fields: [feeId], references: [id])
  feeId     String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  createdBy String?
  updatedBy String?
}
